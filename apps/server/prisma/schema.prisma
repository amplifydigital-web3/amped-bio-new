datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  Int       @id @default(autoincrement())
  name                String
  email               String    @unique
  email_verified_at   DateTime?
  password            String
  onelink             String?   @unique @map("littlelink_name")
  description         String?   @db.LongText @map("littlelink_description")
  role                String    @default("user")
  block               String    @default("no")
  remember_token      String?
  theme               String?
  auth_as             Int?
  provider            String?
  provider_id         String?
  image               String?   @db.LongText // Keep for backward compatibility
  image_file_id       Int?
  reward_business_id  String?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt

  themes              Theme[]
  blocks              Block[]
  confirmationCodes   ConfirmationCode[]
  uploadedFiles       UploadedFile[]
  profileImage        UploadedFile? @relation("UserProfileImage", fields: [image_file_id], references: [id], onDelete: SetNull)

  refreshTokens       RefreshToken[]
  wallet              UserWallet?
  creatorPool         CreatorPool?

  @@map("users")
}

model ThemeCategory {
  id                  Int       @id @default(autoincrement())
  name                String    @unique
  title               String
  category            String
  description         String?
  visible             Boolean   @default(false)
  image_file_id       Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  
  themes              Theme[]
  categoryImage       UploadedFile? @relation("ThemeCategoryImage", fields: [image_file_id], references: [id], onDelete: SetNull)

  @@map("theme_categories")
}

model Theme {
  id                  Int       @id @default(autoincrement())
  user_id             Int?      // if it is null it is a system theme
  share_level         String    @default("private")
  share_config        Json?
  name                String?
  description         String?   @db.LongText
  config              Json?
  category_id         Int?
  thumbnail_file_id   Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  
  user                User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  category            ThemeCategory? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  thumbnailImage      UploadedFile? @relation("ThemeThumbnailImage", fields: [thumbnail_file_id], references: [id], onDelete: SetNull)

  @@map("themes")
}

model Block {
  id                  Int       @id @default(autoincrement())
  user_id             Int
  type                String    @db.VarChar(255)
  order               Int       @default(0)
  clicks              Int       @default(0)
  config              Json?
  created_at          DateTime  @default(now())
  updated_at          DateTime? @updatedAt
  
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("blocks")
}

enum ConfirmationCodeType {
  EMAIL_CONFIRMATION
  EMAIL_CHANGE
  PASSWORD_RESET
}

model ConfirmationCode {
  id          Int                  @id @default(autoincrement())
  code        String               @db.Char(6)
  type        ConfirmationCodeType
  userId      Int
  used        Boolean              @default(false)
  expiresAt   DateTime
  createdAt   DateTime             @default(now())
  updatedAt   DateTime?            @updatedAt
  
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([code])
  @@map("confirmation_codes")
}

enum FileStatus {
  PENDING
  COMPLETED
  DELETED
}

model UploadedFile {
  id                  Int           @id @default(autoincrement())
  s3_key              String        @db.VarChar(255)
  bucket              String        @db.VarChar(100)
  file_name           String        @db.VarChar(255)
  file_type           String?       @db.VarChar(100)
  size                BigInt?
  user_id             Int? // Nullable for admin/server files
  uploaded_at         DateTime      @default(now())
  status              FileStatus    @default(PENDING)
  created_at          DateTime      @default(now())
  updated_at          DateTime?     @updatedAt
  user                User?         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  userProfileImage    User[]        @relation("UserProfileImage")
  themeCategoryImage  ThemeCategory[] @relation("ThemeCategoryImage")
  themeThumbnailImage Theme[]       @relation("ThemeThumbnailImage")
  creatorPoolImage    CreatorPool[] @relation("CreatorPoolImage")

  @@index([s3_key])
  @@index([user_id])
  @@index([status])
  @@map("uploaded_files")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Char(64) // SHA256 hash
  userId    Int
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@map("refresh_tokens")
}

// User wallet address mapping table (one-to-one with User)
model UserWallet {
  id                   Int       @id @default(autoincrement())
  address              String    @unique
  userId               Int       @unique // Ensure one-to-one relationship
  last_airdrop_request DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime? @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_wallets")
}

model CreatorPool {
  id            Int           @id @default(autoincrement())
  userId        Int           @unique
  image_file_id Int?
  description   String?       @db.LongText
  fans          Int           @default(0)
  revoStaked    Int           @default(0)
  poolAddress   String        @unique
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  poolImage     UploadedFile? @relation("CreatorPoolImage", fields: [image_file_id], references: [id], onDelete: SetNull)

  @@map("creator_pools")
}